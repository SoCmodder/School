							Joe Wingbermuehle
							CS 236 Homework 5

1.
	assign	-> id = expr
		expr.expected_type := id.actual_type
	id	-> A | B | C
		id.actual_type := lookupType(id.string)
	expr	-> id + expr
		expr.actual_type := if(id.actual_type = int
			and expr.actual_type = int) then int
			else real end if
		expr.actual_type = expr.expected_type
		| id * expr
		expr.actual_type := if(id.actual_type = int
			and expr.actual_type = int) then int
			else real end if
		expr.actual_type = expr.expected_type
		| ( expr )
		expr.actual_type := expr.actual_type
		expr.actual_type = expr.expected_type
		| id
		expr.actaul_type := id.actual_type
		expr.actual_type = expr.expected_type

2.
	assign	-> var = expr
		expr.expected_type := var.actual_type
	expr	-> var1 + var2
		expr.actual_type := var1.actual_type
		var1.actual_type = var2.actual_type
		if(expr.actual_type = real) then
			expr.expected_type = real
		end if
		| var
		expr.actual_type := var.actual_type
		if(expr.actual_type = real) then
			expr.expected_type = real
		end if
	var	-> A | B | C
		var.actual_type := lookupType(var.string)

3.
	if( expr1 ) {
		expr2;
	} else {
		expr3;
	}

		if expr1 = 0 goto if_else
		expr2
		goto if_end
	if_else:
		expr3
	if_end:
	

	do {
		expr1;
	} while( expr2 );

	do_start:
		expr1
	if expr2 /= 0 goto do_start

4.
	{ b > 3/2 }
	a = 2 * (b - 1) - 1
	{ a > 0 }	-> 0 = 2 * (b - 1) - 1
			-> 1/2 = (b - 1) -> b = 3/2

	{ c > 8 }
	b = (c + 10) / 3
	{ b > 6 }	-> 6 = (c + 10) / 3 -> 18 = c + 10
			-> 8 = c


	{ b > (2 - a) / 2 }
	a = a + 2 * b - 1
	{ a > 1 }	-> 1 = a + 2 * b - 1
			-> 2 = a + 2 * b -> (2 - a) = 2 * b
			-> b = (2 - a) / 2


	{ x > 5 }
	if( x > y ) y = 2 * x; else y = 3 * x - 5;
	{ y > 10 }	-> when x > y : 10 = 2 * x
				5 = x -> (x > 5 and x > y)
			-> when x <= y : 10 = 3 * x - 5
				15 = 3 * x -> 5 = x
				(x <= y and x > 5)
			-> (x > 5 and x > y) or (x <= y and x > 5)
			-> x > 5


5.
	{ b < 1 }
	a = 2 * b + 1	-> 3 = 2 * b + 1 -> 1 = b
	{ a < 3 }
	b = a - 3	-> 0 = a - 3 -> a = 3
	{ b < 0 }

	{ 5 < 3 * a + 5 * b }
	a = 3 * (2 * b + a)
		-> 5 < a - b -> 5 + b > a
		-> 5 + b > 3 * (2 * b + a)
		-> 5 + b > 6 * b + 3 * a
		-> 5 < 5 * b + 3 * a
	{ 5 < a - b }
	if(a > 100) a = a - b; else a = a + b;
		-> when a > 100 : 5 = a - b where b > 0
			b = a - 5
		-> when a <= 100 : 5 = a + b where b > 0
			b = 5 - a
		-> (a > 100 and 5 < a - b) or (a <= 100 and 5 < a + b)
		-> 5 + b < a, 5 - b < a => 5 + b < a
		-> 5 < a - b
	{ a > 5 and b > 0 }

6a.
	program		-> stmt_list
	stmt_list	-> stmt ; stmt_list | <e>
	stmt		-> id = expr | command
	expr		-> term term_tail
	term_tail	-> add_sub_op term term_tail | <e>
	term		-> factor factor_tail
	factor_tail	-> multi_op factor factor_tail | <e>
	factor		-> ( expr ) | id | literal | matrix
	command		-> quit | clear | who
	matrix		-> [ row row_tail ]
	row_tail	-> ; row row_tail | <e>
	row		-> id list_tail
	list_tail	-> , id list_tail | <e>
	add_sub_op	-> + | -
	multi_op	-> * | /

6b.
	First(program) = { id, quit, clear, who, <e> }
	First(stmt_list) = { id, quit, clear, who, <e> }
	First(stmt) = { id, quit, clear, who }
	First(expr) = { (, id, literal, [ }
	First(term_tail) = { +, -, <e> }
	First(term) = { (, id, literal, [ }
	First(factor_tail) = { *, /, <e> }
	First(factor) = { (, id, literal, [ }
	First(command) = { quit, clear, who }
	First(matrix) = { [ }
	First(row_tail) = { ;, <e> }
	First(row) = { id }
	First(list_tail) = { ,, <e> }
	First(add_sub_op) = { +, - }
	First(multi_op) = { *, / }

	Follow(program) = { $ }
	Follow(stmt_list) = { $ }
	Follow(stmt) = { ; }
	Follow(expr) = { ), ; }
	Follow(term_tail) = { ), ; }
	Follow(term) = { +, -, ; }
	Follow(factor_tail) = { +, -, ; }
	Follow(factor) = { *, / }
	Follow(command) = { ; }
	Follow(matrix) = { *, / }
	Follow(row_tail) = { ] }
	Follow(row) = { ;, ] }
	Follow(list_tail) = { ;, ] }
	Follow(add_sub_op) = { (, id, literal, [ }
	Follow(multi_op) = { (, id, literal, [ }

6c.	See hw5-table.xls
