                          CS 284 Operating Systems
                          Programming Assignment #3

                        Interrupt Handling - Signals

Due: 9/25/2003 - Class Time
=========================================================================
REQUIRED READING: Wang 11.15, Appendix 10
                  Also read online UNIX manual pages for the following:
                  signal, sigaction, kill(2), kill(1), sprintf
=========================================================================

For this Project there are two separate programs.  One is described in Part I
and the other in Part II.

Part I
=========
Write a C program that performs the following actions.  Be sure to describe all
significant events during the execution of the program, including any failures:

    1.  Print out the PID of the current and parent process.
    2.  Fork three child processes that perform the following:
        
        A. Announce its creation.
        B. Print out the its PID and the PID of its parent.
        C. Executes the outside executable described in Part II, giving the
           outside program at least one argument:

           First Argument: A number which uniquely identifies this
           child.
           
           NOTE: Remember that this is an integer and the arguments must 
           be strings.

           If the exec fails, exit immediately returning -2.  You should use
           the perror() function to print the error.

        NOTE:  Be sure to include all standard safeguards. ( i.e. an if()
               statement around the child's code )

    3. If any fork() fails, the program should exit immediately returning -1.
       Be sure to clean up the other processes using kill() before exiting!
    4. Setup signal handlers for the following interrupts:
        
        A. SIGQUIT (Ctrl-\) 
            When this signal is received, the Parent should send a SIGUSR1 to
            second child process that was spawned. Be sure to output the fact
            that the signal was received and a new signal sent.
            
            If the child is already dead, tell the user this fact. 

        B. SIGTSTP (Ctrl-Z)
            When this signal is received, the Parent should send a SIGUSR2 to
            the third process. Be sure to output
            the fact that the signal was received and a new signal sent.
            
            If the child is already dead, tell the user this fact.
            
        C. SIGINT (Ctrl-C)
            When this signal is received, the Parent should send a SIGUSR1 to
            each child process that is still alive.

            NOTE:  Do *not* install this handler until you are sure it works.
            Otherwise, you will need to kill the process from another window.

    5. Wait for all children to die.
    6. Print out the exit value of each of the children.
    7. Announce that the main program will die and return 0.

PART II
=========

Note:  This program is the one that will be executed by the program described
in Part I.

Write a C program that performs the following actions, printing all
significant events to standard output:

    1.  Make sure two arguments where passed in.  If not, then exit returning
        5.

    2. Announce the start of it's execution.  Be sure to indicate which child
       is speaking (i.e. use the argument).
    
    3. Setup signal handlers for the following interupts:
        
        A. SIGUSR1:
            When this signal is received, the process should exit returning 2.
            
        B. SIGUSR2:
            When this signal is received, the process should exit returning
            1.

        NOTE:  Remember to ignore the signals that the parent is supposed to
        catch.  Otherwise, the child process will catch them and try to deal
        with them also.

    4. Loop indefinitely.

       NOTE: Do *not* just do an infinite loop with nothing in it! To loop
       indefinitely use:
                for(;;)
                    sleep(1);

    NOTE:  This program should *never* return 0.
    
=====================================================================
ADDITIONAL NOTES
=====================================================================

(1) Please Use the 'script' command to capture all necessary 
    information for handin as described in the previous assignment.

(2) After you have generated the 'script' file, remove ^M (cntl-M)s 
    from your script file, and then edit it by adding a comment to
    each line generated by the system(...) call noting what each of
    the processes corresponds to in terms of your program.

(3) Also store your source files, script file (myhandin#), and the
    executable file, in the directory:  ~cs284/YourLoginName/proj#/
    where # = Assignment number

=================================================================
Three sample outputs follow.

NOTE: This can and most probably will be different for everyone!  
-----------------------------------------------------------------

Example 1:
-----------------------------------------------------------------
Script started on Tue Sep 16 00:41:05 2003
Directory: /home/sea/Projects/TA-284/Projects/Proj3
Projects/Proj3> ./prog3a
./prog3a: Started.  My PID is 4264 and my parent's PID is 4257.
Child 0: I've been created.
Child 0: My pid is 4265 and my parent is 4264.
prog3b-0: Starting Execution.
Child 1: I've been created.
Child 1: My pid is 4266 and my parent is 4264.
prog3b-1: Starting Execution.
Child 2: I've been created.
Child 2: My pid is 4267 and my parent is 4264.
prog3b-2: Starting Execution.
./prog3a: Received SIGQUIT.  Sending SIGUSR1 to second process - PID 4266.
prog3b-1: Received SIGUSR1. I'm gonna die now.
./prog3a: Received SIGQUIT but Child 2 is already dead!
./prog3a: Received SIGQUIT but Child 2 is already dead!
./prog3a: Received SIGSTSP. Sending SIGUSR2 to third process - PID 4267.
prog3b-2: Received SIGUSR2. I'm gonna die now.
./prog3a: Received SIGTSTP but Child 3 is already dead!
./prog3a: Received SIGINT.  Sending SIGINT to all alive processes.
./prog3a: Child 0 still alive. Killing!
prog3b-0: Received SIGUSR1. I'm gonna die now.
./prog3a: Child 0 exited with status - 2
./prog3a: Child 1 exited with status - 1
./prog3a: Child 2 exited with status - 2 
./prog3a:  I'm done.  Going away now.
Projects/Proj3> exit

---------------------------------------------------------------------
EXAMPLE 2
---------------------------------------------------------------------

Script done on Tue Sep 16 00:41:35 2003
Script started on Tue Sep 16 00:41:48 2003
Directory: /home/sea/Projects/TA-284/Projects/Proj3
Projects/Proj3> ./prog3a
./prog3a: Started.  My PID is 4279 and my parent's PID is 4272.
Child 0: I've been created.
Child 0: My pid is 4280 and my parent is 4279.
prog3b-0: Starting Execution.
Child 1: I've been created.
Child 1: My pid is 4281 and my parent is 4279.
prog3b-1: Starting Execution.
Child 2: I've been created.
Child 2: My pid is 4282 and my parent is 4279.
prog3b-2: Starting Execution.
./prog3a: Received SIGSTSP. Sending SIGUSR2 to third process - PID 4282.
prog3b-2: Received SIGUSR2. I'm gonna die now.
./prog3a: Received SIGINT.  Sending SIGINT to all alive processes.
./prog3a: Child 0 still alive. Killing!
prog3b-0: Received SIGUSR1. I'm gonna die now.
./prog3a: Child 1 still alive. Killing!
prog3b-1: Received SIGUSR1. I'm gonna die now.
./prog3a: Child 0 exited with status - 1
./prog3a: Child 1 exited with status - 2
./prog3a: Child 2 exited with status - 2
./prog3a:  I'm done.  Going away now.
Projects/Proj3> exit


-----------------------------------------------------------------------
EXAMPLE 3
-----------------------------------------------------------------------
Script done on Tue Sep 16 00:42:10 2003
Script started on Tue Sep 16 00:42:45 2003
Directory: /home/sea/Projects/TA-284/Projects/Proj3
Projects/Proj3> ./prog3a
./prog3a: Started.  My PID is 4302 and my parent's PID is 4295.
Child 0: I've been created.
Child 0: My pid is 4303 and my parent is 4302.
prog3b-0: Starting Execution.
Child 1: I've been created.
Child 1: My pid is 4304 and my parent is 4302.
prog3b-1: Starting Execution.
Child 2: I've been created.
Child 2: My pid is 4305 and my parent is 4302.
prog3b-2: Starting Execution.
./prog3a: Received SIGQUIT.  Sending SIGUSR1 to second process - PID 4304.
prog3b-1: Received SIGUSR1. I'm gonna die now.
./prog3a: Received SIGINT.  Sending SIGINT to all alive processes.
./prog3a: Child 0 still alive. Killing!
prog3b-0: Received SIGUSR1. I'm gonna die now.
./prog3a: Child 2 still alive. Killing!
prog3b-2: Received SIGUSR1. I'm gonna die now.
./prog3a: Child 0 exited with status - 2
./prog3a: Child 1 exited with status - 2
./prog3a: Child 2 exited with status - 2
./prog3a:  I'm done.  Going away now.
Projects/Proj3> exit
