void merge( int array1[], int begin, int middle, int finish )
{
  int *L, *R;            // arrays to be used for storing
  int i, j, n1, n2;
  n1 = middle - begin;
  n2 = finish - middle;
  L = new int[n1];
  R = new int[n2];

  // Loads the left array all the way up to size n1
  for( i = 0; i < n1; i++ )
    L[i] = array1[begin + i];

  // Loads the right array all the way up to size n2
  for( j = 0; j < n2; j++ )
    R[j] = array1[middle + j];

  // This loop compares elements in the left and right array and stores
  // them back into the main array in sorted order.
  i = 0, j = 0;
  for( int k = begin; k <= finish; k++ )
  {
    /* Checks the invariants. */
    // for( int b = begin; b < k-1; b++ )
    // {
    //   assert( (array1[b] <= array1[b+1]) );
    //   assert( i+j == k-begin );
    // }
    // for( int b = 0; b < n1-1; b++ )
    //   assert( L[b] <= L[b+1] );
    // for( int b = 0; b < n2-1; b++ )
    //   assert( R[b] <= R[b+1] );
    /* End of Checks the invariants. */

    // If both L and R still have elements in the array
    if( i < n1 && j < n2 )
    {
      // If the element in left is less than or equal to, left is stored first.
      if( L[i] <= R[j] )
      {
        array1[k] = L[i];
        i++;
      }

      // Otherwise, the right is stored.
		  else
      {
        array1[k] = R[j];
        j++;
      }
    }
    
    // If only the right array has elements.
    else if( i >= n1 && j < n2 )
    {
      array1[k] = R[j];
      j++;
    }
    
    // If only the left has remaining elements.
    else if( i < n1 && j >= n2 )
    {
      array1[k] = L[i];
      i++;
    }
  }

  delete []L;
  delete []R;
}
